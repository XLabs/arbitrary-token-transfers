// SPDX-License-Identifier: Apache 2

pragma solidity ^0.8.25;

import "tbr/assets/TbrUser.sol";

// This file was (almost entirely) auto-generated by wormhole-solidity-sdk gen/libraryTestWrapper.ts

contract TransferTokenWithRelayTestWrapper {
  function checkTransferTokenBounds(bytes calldata data, uint256 commandIndex) external pure returns (uint8 acquireMode, uint256 size)  {
    return TransferTokenWithRelay.checkTransferTokenBounds(data, commandIndex);
  }

  function decodeToken(bytes calldata transferCommand) external pure returns (IERC20)  {
    return TransferTokenWithRelay.decodeToken(transferCommand);
  }

  function decodeGasdropoff(bytes calldata transferCommand) external pure returns (uint32)  {
    return TransferTokenWithRelay.decodeGasdropoff(transferCommand);
  }

  function decodeTargetChain(bytes calldata transferCommand) external pure returns (uint16)  {
    return TransferTokenWithRelay.decodeTargetChain(transferCommand);
  }

  function decodeTokenAmount(bytes calldata transferCommand) external pure returns (uint256)  {
    return TransferTokenWithRelay.decodeTokenAmount(transferCommand);
  }

  function decodeRecipient(bytes calldata transferCommand) external pure returns (bytes32)  {
    return TransferTokenWithRelay.decodeRecipient(transferCommand);
  }

  function decodeUnwrapIntent(bytes calldata transferCommand) external pure returns (bool)  {
    return TransferTokenWithRelay.decodeUnwrapIntent(transferCommand);
  }

  function decodePermit(bytes calldata transferCommand) external pure returns (
    uint256 value,
    uint256 deadline,
    bytes32 r,
    bytes32 s,
    uint8 v
  )  {
    return TransferTokenWithRelay.decodePermit(transferCommand);
  }

  function decodePermit2Transfer(bytes calldata transferCommand) external pure returns (
    uint256 amount,
    uint256 nonce,
    uint256 sigDeadline,
    bytes memory signature
  )  {
    return TransferTokenWithRelay.decodePermit2Transfer(transferCommand);
  }

  function decodePermit2Permit(bytes calldata transferCommand) external pure returns (
    uint160 amount,
    uint48 expiration,
    uint48 nonce,
    uint256 sigDeadline,
    bytes memory signature
  )  {
    return TransferTokenWithRelay.decodePermit2Permit(transferCommand);
  }
}

contract TransferGasTokenWithRelayTestWrapper {
  function parseTransferGasToken(bytes calldata data, uint256 commandIndex) external pure returns (
    bytes32 recipient,
    uint16 chainId,
    uint256 tokenAmount,
    uint32 gasDropoff,
    uint256 size
  )  {
    return TransferGasTokenWithRelay.parseTransferGasToken(data, commandIndex);
  }
}

contract CompleteTransferTestWrapper {
  function extractVaa(bytes calldata data, uint256 commandIndex) external pure returns (
    bytes memory,
    uint256,
    uint256
  )  {
    return CompleteTransfer.extractVaa(data, commandIndex);
  }

  function decodeSource(bytes calldata vaa, uint256 bodyOffset) external pure returns (bytes32 sourceAddress, uint16 sourceChain)  {
    return CompleteTransfer.decodeSource(vaa, bodyOffset);
  }

  function decodeToken(bytes calldata vaa, uint256 bodyOffset) external pure returns (bytes32 canonicalToken, uint16 canonicalChain)  {
    return CompleteTransfer.decodeToken(vaa, bodyOffset);
  }

  function decodeUserParams(bytes calldata vaa, uint256 bodyOffset) external pure returns (
    address recipient,
    uint256 tokenAmount,
    uint256 gasDropoff,
    bool unwrapIntent
  )  {
    return CompleteTransfer.decodeUserParams(vaa, bodyOffset);
  }
}

contract RelayFeeTestWrapper {
  function parseRelayFeeArgs(bytes calldata data, uint256 commandIndex) external pure returns (
    uint16 chainId,
    uint32 gasDropoff,
    uint256 consumedBytes
  )  {
    return RelayFee.parseRelayFeeArgs(data, commandIndex);
  }
}

contract BaseRelayingConfigTestWrapper {
  function parseBaseRelayingConfigArgs(bytes calldata data, uint256 commandIndex) external pure returns (uint16 chainId, uint256 consumedBytes)  {
    return BaseRelayingConfig.parseBaseRelayingConfigArgs(data, commandIndex);
  }
}
