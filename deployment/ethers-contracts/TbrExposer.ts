/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TbrExposerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelOwnershipTransfer"
      | "checkedUpgrade"
      | "exec768"
      | "exposedAddPeer"
      | "exposedGetBaseFee"
      | "exposedGetCanonicalPeer"
      | "exposedGetMaxGasDropoff"
      | "exposedGetTargetChainData"
      | "exposedIsChainSupported"
      | "exposedIsPaused"
      | "exposedIsPeer"
      | "exposedQuoteRelay"
      | "exposedSetBaseFee"
      | "exposedSetCanonicalPeer"
      | "exposedSetMaxGasDropoff"
      | "exposedSetPause"
      | "exposedTransferEth"
      | "exposed_acquireTokens"
      | "exposed_getAndCheckTransferParams"
      | "exposed_parseSharedParams"
      | "get1959"
      | "receiveOwnership"
      | "transferOwnership"
      | "upgrade"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminsUpdated"
      | "FeeRecipienUpdated"
      | "OwnerUpdated"
      | "TransferRequested"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelOwnershipTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkedUpgrade",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "exec768", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exposedAddPeer",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exposedGetBaseFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exposedGetCanonicalPeer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exposedGetMaxGasDropoff",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exposedGetTargetChainData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exposedIsChainSupported",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exposedIsPaused",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exposedIsPeer",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exposedQuoteRelay",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exposedSetBaseFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exposedSetCanonicalPeer",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exposedSetMaxGasDropoff",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exposedSetPause",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "exposedTransferEth",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exposed_acquireTokens",
    values: [BytesLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exposed_getAndCheckTransferParams",
    values: [
      BigNumberish,
      BytesLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exposed_parseSharedParams",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "get1959", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOwnershipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkedUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exec768", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exposedAddPeer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposedGetBaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposedGetCanonicalPeer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposedGetMaxGasDropoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposedGetTargetChainData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposedIsChainSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposedIsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposedIsPeer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposedQuoteRelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposedSetBaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposedSetCanonicalPeer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposedSetMaxGasDropoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposedSetPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposedTransferEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposed_acquireTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposed_getAndCheckTransferParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposed_parseSharedParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get1959", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
}

export namespace AdminsUpdatedEvent {
  export type InputTuple = [
    addr: AddressLike,
    isAdmin: boolean,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [addr: string, isAdmin: boolean, timestamp: bigint];
  export interface OutputObject {
    addr: string;
    isAdmin: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRecipienUpdatedEvent {
  export type InputTuple = [
    oldAddress: AddressLike,
    newAddress: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldAddress: string,
    newAddress: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerUpdatedEvent {
  export type InputTuple = [
    oldAddress: AddressLike,
    newAddress: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    oldAddress: string,
    newAddress: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    oldAddress: string;
    newAddress: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRequestedEvent {
  export type InputTuple = [
    sender: AddressLike,
    sequence: BigNumberish,
    gasDropoff: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    sequence: bigint,
    gasDropoff: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    sender: string;
    sequence: bigint;
    gasDropoff: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TbrExposer extends BaseContract {
  connect(runner?: ContractRunner | null): TbrExposer;
  waitForDeployment(): Promise<this>;

  interface: TbrExposerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelOwnershipTransfer: TypedContractMethod<[], [void], "nonpayable">;

  checkedUpgrade: TypedContractMethod<[data: BytesLike], [void], "payable">;

  exec768: TypedContractMethod<[], [string], "payable">;

  exposedAddPeer: TypedContractMethod<
    [chainId: BigNumberish, peer: BytesLike],
    [void],
    "nonpayable"
  >;

  exposedGetBaseFee: TypedContractMethod<
    [chainId: BigNumberish],
    [bigint],
    "view"
  >;

  exposedGetCanonicalPeer: TypedContractMethod<
    [chainId: BigNumberish],
    [string],
    "view"
  >;

  exposedGetMaxGasDropoff: TypedContractMethod<
    [targetChain: BigNumberish],
    [bigint],
    "view"
  >;

  exposedGetTargetChainData: TypedContractMethod<
    [targetChain: BigNumberish],
    [[string, bigint, bigint, boolean]],
    "view"
  >;

  exposedIsChainSupported: TypedContractMethod<
    [targetChain: BigNumberish],
    [boolean],
    "view"
  >;

  exposedIsPaused: TypedContractMethod<
    [targetChain: BigNumberish],
    [boolean],
    "view"
  >;

  exposedIsPeer: TypedContractMethod<
    [chainId: BigNumberish, peer: BytesLike],
    [boolean],
    "view"
  >;

  exposedQuoteRelay: TypedContractMethod<
    [chainId: BigNumberish, gasDropoff: BigNumberish, baseFee: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  exposedSetBaseFee: TypedContractMethod<
    [chainId: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  exposedSetCanonicalPeer: TypedContractMethod<
    [chainId: BigNumberish, peer: BytesLike],
    [void],
    "nonpayable"
  >;

  exposedSetMaxGasDropoff: TypedContractMethod<
    [chainId: BigNumberish, maxGasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;

  exposedSetPause: TypedContractMethod<
    [chainId: BigNumberish, paused: boolean],
    [void],
    "nonpayable"
  >;

  exposedTransferEth: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  exposed_acquireTokens: TypedContractMethod<
    [
      data: BytesLike,
      offset: BigNumberish,
      token: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  exposed_getAndCheckTransferParams: TypedContractMethod<
    [
      targetChain: BigNumberish,
      recipient: BytesLike,
      token: AddressLike,
      tokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      commandIndex: BigNumberish
    ],
    [[string, bigint, bigint, bigint]],
    "view"
  >;

  exposed_parseSharedParams: TypedContractMethod<
    [data: BytesLike, offset: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint] & {
        targetChain: bigint;
        recipient: string;
        gasDropoff: bigint;
        inputAmount: bigint;
      }
    ],
    "view"
  >;

  get1959: TypedContractMethod<[], [string], "view">;

  receiveOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgrade: TypedContractMethod<
    [implementation: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelOwnershipTransfer"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkedUpgrade"
  ): TypedContractMethod<[data: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "exec768"
  ): TypedContractMethod<[], [string], "payable">;
  getFunction(
    nameOrSignature: "exposedAddPeer"
  ): TypedContractMethod<
    [chainId: BigNumberish, peer: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exposedGetBaseFee"
  ): TypedContractMethod<[chainId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "exposedGetCanonicalPeer"
  ): TypedContractMethod<[chainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "exposedGetMaxGasDropoff"
  ): TypedContractMethod<[targetChain: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "exposedGetTargetChainData"
  ): TypedContractMethod<
    [targetChain: BigNumberish],
    [[string, bigint, bigint, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "exposedIsChainSupported"
  ): TypedContractMethod<[targetChain: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "exposedIsPaused"
  ): TypedContractMethod<[targetChain: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "exposedIsPeer"
  ): TypedContractMethod<
    [chainId: BigNumberish, peer: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "exposedQuoteRelay"
  ): TypedContractMethod<
    [chainId: BigNumberish, gasDropoff: BigNumberish, baseFee: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "exposedSetBaseFee"
  ): TypedContractMethod<
    [chainId: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exposedSetCanonicalPeer"
  ): TypedContractMethod<
    [chainId: BigNumberish, peer: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exposedSetMaxGasDropoff"
  ): TypedContractMethod<
    [chainId: BigNumberish, maxGasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exposedSetPause"
  ): TypedContractMethod<
    [chainId: BigNumberish, paused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exposedTransferEth"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exposed_acquireTokens"
  ): TypedContractMethod<
    [
      data: BytesLike,
      offset: BigNumberish,
      token: AddressLike,
      amount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exposed_getAndCheckTransferParams"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      recipient: BytesLike,
      token: AddressLike,
      tokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      commandIndex: BigNumberish
    ],
    [[string, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "exposed_parseSharedParams"
  ): TypedContractMethod<
    [data: BytesLike, offset: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint] & {
        targetChain: bigint;
        recipient: string;
        gasDropoff: bigint;
        inputAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "get1959"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgrade"
  ): TypedContractMethod<
    [implementation: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminsUpdated"
  ): TypedContractEvent<
    AdminsUpdatedEvent.InputTuple,
    AdminsUpdatedEvent.OutputTuple,
    AdminsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeRecipienUpdated"
  ): TypedContractEvent<
    FeeRecipienUpdatedEvent.InputTuple,
    FeeRecipienUpdatedEvent.OutputTuple,
    FeeRecipienUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerUpdated"
  ): TypedContractEvent<
    OwnerUpdatedEvent.InputTuple,
    OwnerUpdatedEvent.OutputTuple,
    OwnerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TransferRequested"
  ): TypedContractEvent<
    TransferRequestedEvent.InputTuple,
    TransferRequestedEvent.OutputTuple,
    TransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminsUpdated(address,bool,uint256)": TypedContractEvent<
      AdminsUpdatedEvent.InputTuple,
      AdminsUpdatedEvent.OutputTuple,
      AdminsUpdatedEvent.OutputObject
    >;
    AdminsUpdated: TypedContractEvent<
      AdminsUpdatedEvent.InputTuple,
      AdminsUpdatedEvent.OutputTuple,
      AdminsUpdatedEvent.OutputObject
    >;

    "FeeRecipienUpdated(address,address,uint256)": TypedContractEvent<
      FeeRecipienUpdatedEvent.InputTuple,
      FeeRecipienUpdatedEvent.OutputTuple,
      FeeRecipienUpdatedEvent.OutputObject
    >;
    FeeRecipienUpdated: TypedContractEvent<
      FeeRecipienUpdatedEvent.InputTuple,
      FeeRecipienUpdatedEvent.OutputTuple,
      FeeRecipienUpdatedEvent.OutputObject
    >;

    "OwnerUpdated(address,address,uint256)": TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;
    OwnerUpdated: TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;

    "TransferRequested(address,uint64,uint32,uint256)": TypedContractEvent<
      TransferRequestedEvent.InputTuple,
      TransferRequestedEvent.OutputTuple,
      TransferRequestedEvent.OutputObject
    >;
    TransferRequested: TypedContractEvent<
      TransferRequestedEvent.InputTuple,
      TransferRequestedEvent.OutputTuple,
      TransferRequestedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
