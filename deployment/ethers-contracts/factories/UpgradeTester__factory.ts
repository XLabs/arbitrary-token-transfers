/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { UpgradeTester, UpgradeTesterInterface } from "../UpgradeTester";

const _abi = [
  {
    inputs: [],
    name: "IdempotentUpgrade",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "revertData",
        type: "bytes",
      },
    ],
    name: "UpgradeFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "Constructed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "checkedUpgrade",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610425908161001b8239f35b600080fdfe60406080815260048036101561001457600080fd5b600090813560e01c80636fbc15e91461016a578063aaf10f42146101345763f4189c471461004157600080fd5b602036600319011261013057803567ffffffffffffffff811161012c5761006b90369083016102d7565b913330146100f35760ff6000805160206103d08339815191525460a01c166100e557506100be7f76e64146a1092c743cd765256e81a0669bd2e5b6c47584ac63b42861d3166043939451928392836103a7565b0390a15b6000805160206103d0833981519152805460ff60a01b1916600160a01b17905580f35b8451636edaef2f60e11b8152fd5b506101247f36507a6095075c155c065fd8c16d9ec3a411f1ae1d560d50a19a2b398b88b5b2939451928392836103a7565b0390a16100c2565b8280fd5b5080fd5b8284346101305781600319360112610130576000805160206103d08339815191525490516001600160a01b039091168152602090f35b50823461012c578060031936011261012c576001600160a01b038235818116939185918590036101305760243567ffffffffffffffff811161012c576101b390369085016102d7565b92906101be84610342565b936101cb8751958661030a565b808552368183011161012c578060209283870137840101526000805160206103d083398151915290815490811686146102c7576001600160a01b03191685179055825163f4189c4760e01b602082019081528692839290610243908290610235906024830161035e565b03601f19810183528261030a565b519082305af1913d156102bf573d9261025b84610342565b936102688351958661030a565b84523d86602086013e5b156102a1575050507fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8280a280f35b51630dc0c93f60e01b81529182916102bb9190830161035e565b0390fd5b606092610272565b845163071d44f360e41b81528490fd5b9181601f840112156103055782359167ffffffffffffffff8311610305576020838186019501011161030557565b600080fd5b90601f8019910116810190811067ffffffffffffffff82111761032c57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161032c57601f01601f191660200190565b6020808252825181830181905290939260005b82811061039357505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610371565b90918060409360208452816020850152848401376000828201840152601f01601f191601019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220bc445ffcb441cf904c5fea918a69bc93b284661944de74c3d263a084c36fb55e64736f6c63430008190033";

type UpgradeTesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UpgradeTesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UpgradeTester__factory extends ContractFactory {
  constructor(...args: UpgradeTesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UpgradeTester & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UpgradeTester__factory {
    return super.connect(runner) as UpgradeTester__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UpgradeTesterInterface {
    return new Interface(_abi) as UpgradeTesterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UpgradeTester {
    return new Contract(address, _abi, runner) as unknown as UpgradeTester;
  }
}
