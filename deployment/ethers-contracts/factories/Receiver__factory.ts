/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Receiver, ReceiverInterface } from "../Receiver";

const _abi = [
  {
    type: "fallback",
    stateMutability: "payable",
  },
] as const;

const _bytecode =
  "0x60808060405234601357605c908160198239f35b600080fdfe600054348101809111601057600055005b634e487b7160e01b600052601160045260246000fdfea2646970667358221220822720acc9b7e7fb084eb448a03ef838fbbe998395813f1c716df28f0701cc7b64736f6c63430008190033";

type ReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Receiver__factory extends ContractFactory {
  constructor(...args: ReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Receiver & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Receiver__factory {
    return super.connect(runner) as Receiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReceiverInterface {
    return new Interface(_abi) as ReceiverInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Receiver {
    return new Contract(address, _abi, runner) as unknown as Receiver;
  }
}
