/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { MockERC20, MockERC20Interface } from "../MockERC20";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601557610e4f908161001b8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde0314610a7057508163095ea7b3146109ff5781631624f6c61461068d57816318160ddd1461066e57816323b872dd1461058e578163313ce5671461056c5781633644e5151461054857816370a08231146105125781637ecebe00146104da57816395d89b41146103f4578163a9059cbb14610361578163d505accf146100ff575063dd62ed3e146100b457600080fd5b346100fb57806003193601126100fb57806020926100d0610ae5565b6100d8610b00565b6001600160a01b0391821683526005865283832091168252845220549051908152f35b5080fd5b90503461035d5760e036600319011261035d5761011a610ae5565b610122610b00565b9260443590606435936084359360ff85168095036103595742861061031657610149610c93565b9660018060a01b0380921696878a5260209660088852858b20998a549a6000198c146103035760018c019055865192858a8501957f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c987528c8a870152169b8c606086015289608086015260a085015260c084015260c0835260e0830167ffffffffffffffff94848210868311176102f0578189528451902061010085019261190160f01b845261010286015261012285015260428152610160840194818610908611176102dd57848852519020835261018082015260a4356101a082015260c4356101c0909101528880528590899060809060015afa156102d35787511690811515806102ca575b1561029657508652600583528086208587528352808620829055519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a380f35b825162461bcd60e51b8152908101859052600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606490fd5b50858214610251565b82513d89823e3d90fd5b634e487b7160e01b8d526041875260248dfd5b634e487b7160e01b8e526041885260248efd5b634e487b7160e01b8d526011875260248dfd5b506020606492519162461bcd60e51b8352820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152fd5b8780fd5b8280fd5b90503461035d578160031936011261035d579160209261037f610ae5565b9083602435923385528287526103988483872054610d51565b3386528388528286205560018060a01b0316938481526103bb8483832054610dc0565b928582528752205582519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef843392a35160018152f35b8284346104d757806003193601126104d75781519080600180549061041882610ba5565b80865292602092600181169081156104aa5750600114610452575b61044e868861044482890383610b16565b5191829182610a9c565b0390f35b9350600184527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b838510610497575050505081016020016104448261044e86610433565b805486860184015293820193810161047a565b905061044e9795508693506020925061044494915060ff191682840152151560051b820101929486610433565b80fd5b5050346100fb5760203660031901126100fb5760209181906001600160a01b03610502610ae5565b1681526008845220549051908152f35b90503461035d57602036600319011261035d5760209282916001600160a01b0361053a610ae5565b168252845220549051908152f35b5050346100fb57816003193601126100fb57602090610565610c93565b9051908152f35b5050346100fb57816003193601126100fb5760209060ff600254169051908152f35b8284346104d75760603660031901126104d7576105a9610ae5565b927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6105d3610b00565b60443560018060a01b038097169384865286602098899460058652828920338a5286528289205485600019820361064b575b505087895283865261061a85848b2054610d51565b888a52848752838a205516968781526106368483832054610dc0565b92888252855220558551908152a35160018152f35b61065491610d51565b888a5260058752838a20338b528752838a20558b85610605565b5050346100fb57816003193601126100fb576020906003549051908152f35b839150346100fb5760603660031901126100fb5767ffffffffffffffff9281358481116109fb576106c19036908401610b4e565b936024358181116109f7576106d99036908501610b4e565b926044359260ff84168094036109f35760ff600954166109ba575085518281116109a757806107088754610ba5565b97601f9889811161093c575b506020908983116001146108bb5788926108b0575b50508160011b916000199060031b1c19161785555b835191821161089d57506001926107558454610ba5565b86811161083b575b5060209582116001146107bd5794849582939495926107b2575b5050600019600383901b1c191690831b1782555b60ff1990816002541617600255466006556107a4610cad565b600755600954161760095580f35b015190508580610777565b838552601f198216957fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf691865b8881106108255750838697989695961061080c575b505050811b01825561078b565b015160001960f88460031b161c191690558580806107ff565b81830151845592860192602092830192016107ea565b8486527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68780850160051c82019260208610610894575b0160051c019085905b82811061088957505061075d565b87815501859061087b565b92508192610872565b634e487b7160e01b855260419052602484fd5b015190508880610729565b8880527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639250601f198416895b818110610924575090846001959493921061090b575b505050811b01855561073e565b015160001960f88460031b161c191690558880806108fe565b929360206001819287860151815501950193016108e8565b9091508780527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638980850160051c8201926020861061099e575b9085949392910160051c01905b8181106109905750610714565b898155849350600101610983565b92508192610976565b634e487b7160e01b865260418252602486fd5b906020606492519162461bcd60e51b835282015260136024820152721053149150511657d253925512505312569151606a1b6044820152fd5b8580fd5b8480fd5b8380fd5b5050346100fb57806003193601126100fb5760209181610a1d610ae5565b91602435918291338152600587528181209460018060a01b0316948582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8490843461035d578260031936011261035d5761044e925061044482610a9581610bdf565b0383610b16565b6020808252825181830181905290939260005b828110610ad157505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610aaf565b600435906001600160a01b0382168203610afb57565b600080fd5b602435906001600160a01b0382168203610afb57565b90601f8019910116810190811067ffffffffffffffff821117610b3857604052565b634e487b7160e01b600052604160045260246000fd5b81601f82011215610afb5780359067ffffffffffffffff8211610b385760405192610b83601f8401601f191660200185610b16565b82845260208383010111610afb57816000926020809301838601378301015290565b90600182811c92168015610bd5575b6020831014610bbf57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610bb4565b9060009160005490610bf082610ba5565b80825291602090600190818116908115610c6e5750600114610c13575b50505050565b92939450600080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563926000935b858510610c5b575050506020925001019038808080610c0d565b8054858501840152938201938101610c41565b92505050602093945060ff929192191683830152151560051b01019038808080610c0d565b6006544603610ca25760075490565b610caa610cad565b90565b604051610cc481610cbd81610bdf565b0382610b16565b6020815191012060405160208101917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f835260408201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260a0815260c0810181811067ffffffffffffffff821117610b385760405251902090565b90808210610d7b578103908111610d655790565b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601c60248201527f45524332303a207375627472616374696f6e20756e646572666c6f77000000006044820152606490fd5b90810190818111610d65578110610dd45790565b60405162461bcd60e51b815260206004820152601860248201527f45524332303a206164646974696f6e206f766572666c6f7700000000000000006044820152606490fdfea2646970667358221220476874f3abf750300c7b4852f5136112462f46fe701b06d700a74ea09c24ef3a64736f6c63430008190033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockERC20__factory {
    return super.connect(runner) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new Interface(_abi) as MockERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockERC20 {
    return new Contract(address, _abi, runner) as unknown as MockERC20;
  }
}
