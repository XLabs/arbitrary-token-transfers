/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  PriceOracleDispatcher,
  PriceOracleDispatcherInterface,
} from "../PriceOracleDispatcher";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint16",
        name: "chainId",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "command",
        type: "uint8",
      },
    ],
    name: "ChainNotSupportedByCommand",
    type: "error",
  },
  {
    inputs: [],
    name: "IdempotentUpgrade",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "command",
        type: "uint8",
      },
    ],
    name: "InvalidAccessControlCommand",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "query",
        type: "uint8",
      },
    ],
    name: "InvalidAccessControlQuery",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidChainId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "command",
        type: "uint8",
      },
    ],
    name: "InvalidCommand",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidData",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "InvalidEvmLayout",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "query",
        type: "uint8",
      },
    ],
    name: "InvalidPriceQuery",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "query",
        type: "uint8",
      },
    ],
    name: "InvalidQuery",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "encodedLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expectedLength",
        type: "uint256",
      },
    ],
    name: "LengthMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAuthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "UnsupportedVersion",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "revertData",
        type: "bytes",
      },
    ],
    name: "UpgradeFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isAdmin",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "AdminsUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "AssistantUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint16",
        name: "chainId",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "feeParams",
        type: "bytes32",
      },
    ],
    name: "FeeParamsUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "OwnerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "cancelOwnershipTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "checkedUpgrade",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "exec768",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "get1959",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "receiveOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class PriceOracleDispatcher__factory {
  static readonly abi = _abi;
  static createInterface(): PriceOracleDispatcherInterface {
    return new Interface(_abi) as PriceOracleDispatcherInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PriceOracleDispatcher {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as PriceOracleDispatcher;
  }
}
