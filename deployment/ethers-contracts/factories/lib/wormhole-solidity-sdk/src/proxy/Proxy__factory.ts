/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, BytesLike, AddressLike, ContractDeployTransaction, ContractRunner } from "ethers"
import type { PayableOverrides } from "../../../../../common.js"
  import type { Proxy, ProxyInterface } from "../../../../../lib/wormhole-solidity-sdk/src/proxy/Proxy.js";

  const _abi = [
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "logic",
        "type": "address"
      },
      {
        "internalType": "bytes",
        "name": "data",
        "type": "bytes"
      }
    ],
    "stateMutability": "payable",
    "type": "constructor"
  },
  {
    "inputs": [
      {
        "internalType": "bytes",
        "name": "revertData",
        "type": "bytes"
      }
    ],
    "name": "ProxyConstructionFailed",
    "type": "error"
  },
  {
    "stateMutability": "payable",
    "type": "fallback"
  }
] as const;

  const _bytecode = "0x6080806040526102ab80380380916100178285610161565b833981019060408183031261015c5780516001600160a01b0381169182820361015c576020810151906001600160401b03821161015c57019280601f8501121561015c578351926100678461019a565b916100756040519384610161565b8483526020858701011161015c57610098600095948695602080860191016101b5565b60018060a01b031960008051602061028b83398151915254161760008051602061028b833981519152556040516100f2816100e4602082019463f4189c4760e01b8652602483016101d8565b03601f198101835282610161565b51915af43d15610154573d906101078261019a565b916101156040519384610161565b82523d6000602084013e5b1561013357604051608690816102058239f35b604051631dffd9cd60e21b815290819061015090600483016101d8565b0390fd5b606090610120565b600080fd5b601f909101601f19168101906001600160401b0382119082101761018457604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161018457601f01601f191660200190565b60005b8381106101c85750506000910152565b81810151838201526020016101b8565b604091602082526101f881518092816020860152602086860191016101b5565b601f01601f191601019056fe60806040527f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5460009081906001600160a01b0316368280378136915af43d6000803e15604b573d6000f35b3d6000fdfea2646970667358221220d210fbe21b04acdaee811a68760471e9d66a097fa9b70ef5b3e24c10aeb54f3264736f6c634300081c0033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc";

  
      type ProxyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: ProxyConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class Proxy__factory extends ContractFactory {
    
      constructor(...args: ProxyConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(logic: AddressLike, data: BytesLike, overrides?: PayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(logic, data, overrides || {});
    };
    override deploy(logic: AddressLike, data: BytesLike, overrides?: PayableOverrides & { from?: string }) {
      return super.deploy(logic, data, overrides || {}) as Promise<Proxy & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): Proxy__factory {
      return super.connect(runner) as Proxy__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): ProxyInterface {
      return new Interface(_abi) as ProxyInterface;
    }
    static connect(address: string, runner?: ContractRunner | null): Proxy {
      return new Contract(address, _abi, runner) as unknown as Proxy;
    }
  }

  
  