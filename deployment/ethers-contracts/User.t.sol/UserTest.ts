/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace StdInvariant {
  export type FuzzSelectorStruct = {
    addr: AddressLike;
    selectors: BytesLike[];
  };

  export type FuzzSelectorStructOutput = [addr: string, selectors: string[]] & {
    addr: string;
    selectors: string[];
  };

  export type FuzzArtifactSelectorStruct = {
    artifact: string;
    selectors: BytesLike[];
  };

  export type FuzzArtifactSelectorStructOutput = [
    artifact: string,
    selectors: string[]
  ] & { artifact: string; selectors: string[] };

  export type FuzzInterfaceStruct = { addr: AddressLike; artifacts: string[] };

  export type FuzzInterfaceStructOutput = [
    addr: string,
    artifacts: string[]
  ] & { addr: string; artifacts: string[] };
}

export interface UserTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "IS_TEST"
      | "excludeArtifacts"
      | "excludeContracts"
      | "excludeSelectors"
      | "excludeSenders"
      | "failed"
      | "setUp"
      | "targetArtifactSelectors"
      | "targetArtifacts"
      | "targetContracts"
      | "targetInterfaces"
      | "targetSelectors"
      | "targetSenders"
      | "testAcquireTokens_ACQUIRE_PERMIT"
      | "testAcquireTokens_ACQUIRE_PERMIT2PERMIT"
      | "testAcquireTokens_ACQUIRE_PERMIT2TRANSFER"
      | "testAcquireTokens_ACQUIRE_PREAPPROVED"
      | "testAcquireTokens_InvalidAcquireMode"
      | "testBaseRelayingConfig"
      | "testCompleteTransfer_InsufficientGasDropoff"
      | "testCompleteTransfer_UnrecognizedPeer"
      | "testCompleteTransfer_gasToken"
      | "testCompleteTransfer_nonGasToken"
      | "testGetAndCheckTransferParams"
      | "testGetAndCheckTransferParams_GasDropoffExceedsMaximum"
      | "testGetAndCheckTransferParams_InvalidTokenAmount"
      | "testGetAndCheckTransferParams_InvalidTokenRecipient"
      | "testGetAndCheckTransferParams_TargetChainNotSupported"
      | "testGetAndCheckTransferParams_TransfersToChainArePaused"
      | "testParseSharedParams"
      | "testRelayFee"
      | "testRelayFee_GasDropoffExceedsMaximum"
      | "testRelayFee_RemainderBelowMwei"
      | "testTransferGasTokenWithRelaySimple"
      | "testTransferGasTokenWithRelay_FeesInsufficient"
      | "testTransferGasTokenWithRelay_InsufficientAllowance"
      | "testTransferTokenWithRelayDoubleTransfer"
      | "testTransferTokenWithRelaySimple"
      | "testTransferTokenWithRelay_FeesInsufficient"
      | "testTransferTokenWithRelay_InsufficientAllowance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "SlotFound"
      | "Transfer"
      | "TransferRedeemed"
      | "TransferRequested"
      | "WARNING_UninitedSlot"
      | "Withdrawal"
      | "log"
      | "log_address"
      | "log_array(uint256[])"
      | "log_array(int256[])"
      | "log_array(address[])"
      | "log_bytes"
      | "log_bytes32"
      | "log_int"
      | "log_named_address"
      | "log_named_array(string,uint256[])"
      | "log_named_array(string,int256[])"
      | "log_named_array(string,address[])"
      | "log_named_bytes"
      | "log_named_bytes32"
      | "log_named_decimal_int"
      | "log_named_decimal_uint"
      | "log_named_int"
      | "log_named_string"
      | "log_named_uint"
      | "log_string"
      | "log_uint"
      | "logs"
  ): EventFragment;

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "excludeArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeSenders",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetArtifactSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetArtifacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetInterfaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSelectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testAcquireTokens_ACQUIRE_PERMIT",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testAcquireTokens_ACQUIRE_PERMIT2PERMIT",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testAcquireTokens_ACQUIRE_PERMIT2TRANSFER",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testAcquireTokens_ACQUIRE_PREAPPROVED",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testAcquireTokens_InvalidAcquireMode",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testBaseRelayingConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCompleteTransfer_InsufficientGasDropoff",
    values: [
      BigNumberish,
      BigNumberish,
      boolean,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testCompleteTransfer_UnrecognizedPeer",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testCompleteTransfer_gasToken",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testCompleteTransfer_nonGasToken",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetAndCheckTransferParams",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetAndCheckTransferParams_GasDropoffExceedsMaximum",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetAndCheckTransferParams_InvalidTokenAmount",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetAndCheckTransferParams_InvalidTokenRecipient",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetAndCheckTransferParams_TargetChainNotSupported",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetAndCheckTransferParams_TransfersToChainArePaused",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testParseSharedParams",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testRelayFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testRelayFee_GasDropoffExceedsMaximum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testRelayFee_RemainderBelowMwei",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testTransferGasTokenWithRelaySimple",
    values: [BigNumberish, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testTransferGasTokenWithRelay_FeesInsufficient",
    values: [BigNumberish, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testTransferGasTokenWithRelay_InsufficientAllowance",
    values: [BigNumberish, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testTransferTokenWithRelayDoubleTransfer",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testTransferTokenWithRelaySimple",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testTransferTokenWithRelay_FeesInsufficient",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testTransferTokenWithRelay_InsufficientAllowance",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifactSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetArtifacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetInterfaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAcquireTokens_ACQUIRE_PERMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAcquireTokens_ACQUIRE_PERMIT2PERMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAcquireTokens_ACQUIRE_PERMIT2TRANSFER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAcquireTokens_ACQUIRE_PREAPPROVED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testAcquireTokens_InvalidAcquireMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBaseRelayingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCompleteTransfer_InsufficientGasDropoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCompleteTransfer_UnrecognizedPeer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCompleteTransfer_gasToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCompleteTransfer_nonGasToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetAndCheckTransferParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetAndCheckTransferParams_GasDropoffExceedsMaximum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetAndCheckTransferParams_InvalidTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetAndCheckTransferParams_InvalidTokenRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetAndCheckTransferParams_TargetChainNotSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetAndCheckTransferParams_TransfersToChainArePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testParseSharedParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRelayFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRelayFee_GasDropoffExceedsMaximum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRelayFee_RemainderBelowMwei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransferGasTokenWithRelaySimple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransferGasTokenWithRelay_FeesInsufficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransferGasTokenWithRelay_InsufficientAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransferTokenWithRelayDoubleTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransferTokenWithRelaySimple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransferTokenWithRelay_FeesInsufficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTransferTokenWithRelay_InsufficientAllowance",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlotFoundEvent {
  export type InputTuple = [
    who: AddressLike,
    fsig: BytesLike,
    keysHash: BytesLike,
    slot: BigNumberish
  ];
  export type OutputTuple = [
    who: string,
    fsig: string,
    keysHash: string,
    slot: bigint
  ];
  export interface OutputObject {
    who: string;
    fsig: string;
    keysHash: string;
    slot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRedeemedEvent {
  export type InputTuple = [
    emitterChainId: BigNumberish,
    emitterAddress: BytesLike,
    sequence: BigNumberish
  ];
  export type OutputTuple = [
    emitterChainId: bigint,
    emitterAddress: string,
    sequence: bigint
  ];
  export interface OutputObject {
    emitterChainId: bigint;
    emitterAddress: string;
    sequence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRequestedEvent {
  export type InputTuple = [
    sender: AddressLike,
    sequence: BigNumberish,
    gasDropoff: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    sequence: bigint,
    gasDropoff: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    sender: string;
    sequence: bigint;
    gasDropoff: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WARNING_UninitedSlotEvent {
  export type InputTuple = [who: AddressLike, slot: BigNumberish];
  export type OutputTuple = [who: string, slot: bigint];
  export interface OutputObject {
    who: string;
    slot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [src: AddressLike, amount: BigNumberish];
  export type OutputTuple = [src: string, amount: bigint];
  export interface OutputObject {
    src: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace logEvent {
  export type InputTuple = [arg0: string];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_addressEvent {
  export type InputTuple = [arg0: AddressLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_array_uint256_array_Event {
  export type InputTuple = [val: BigNumberish[]];
  export type OutputTuple = [val: bigint[]];
  export interface OutputObject {
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_array_int256_array_Event {
  export type InputTuple = [val: BigNumberish[]];
  export type OutputTuple = [val: bigint[]];
  export interface OutputObject {
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_array_address_array_Event {
  export type InputTuple = [val: AddressLike[]];
  export type OutputTuple = [val: string[]];
  export interface OutputObject {
    val: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_bytesEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_bytes32Event {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_intEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_addressEvent {
  export type InputTuple = [key: string, val: AddressLike];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_array_string_uint256_array_Event {
  export type InputTuple = [key: string, val: BigNumberish[]];
  export type OutputTuple = [key: string, val: bigint[]];
  export interface OutputObject {
    key: string;
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_array_string_int256_array_Event {
  export type InputTuple = [key: string, val: BigNumberish[]];
  export type OutputTuple = [key: string, val: bigint[]];
  export interface OutputObject {
    key: string;
    val: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_array_string_address_array_Event {
  export type InputTuple = [key: string, val: AddressLike[]];
  export type OutputTuple = [key: string, val: string[]];
  export interface OutputObject {
    key: string;
    val: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_bytesEvent {
  export type InputTuple = [key: string, val: BytesLike];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_bytes32Event {
  export type InputTuple = [key: string, val: BytesLike];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_decimal_intEvent {
  export type InputTuple = [
    key: string,
    val: BigNumberish,
    decimals: BigNumberish
  ];
  export type OutputTuple = [key: string, val: bigint, decimals: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_decimal_uintEvent {
  export type InputTuple = [
    key: string,
    val: BigNumberish,
    decimals: BigNumberish
  ];
  export type OutputTuple = [key: string, val: bigint, decimals: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_intEvent {
  export type InputTuple = [key: string, val: BigNumberish];
  export type OutputTuple = [key: string, val: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_stringEvent {
  export type InputTuple = [key: string, val: string];
  export type OutputTuple = [key: string, val: string];
  export interface OutputObject {
    key: string;
    val: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_named_uintEvent {
  export type InputTuple = [key: string, val: BigNumberish];
  export type OutputTuple = [key: string, val: bigint];
  export interface OutputObject {
    key: string;
    val: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_stringEvent {
  export type InputTuple = [arg0: string];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace log_uintEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace logsEvent {
  export type InputTuple = [arg0: BytesLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UserTest extends BaseContract {
  connect(runner?: ContractRunner | null): UserTest;
  waitForDeployment(): Promise<this>;

  interface: UserTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  IS_TEST: TypedContractMethod<[], [boolean], "view">;

  excludeArtifacts: TypedContractMethod<[], [string[]], "view">;

  excludeContracts: TypedContractMethod<[], [string[]], "view">;

  excludeSelectors: TypedContractMethod<
    [],
    [StdInvariant.FuzzSelectorStructOutput[]],
    "view"
  >;

  excludeSenders: TypedContractMethod<[], [string[]], "view">;

  failed: TypedContractMethod<[], [boolean], "view">;

  setUp: TypedContractMethod<[], [void], "nonpayable">;

  targetArtifactSelectors: TypedContractMethod<
    [],
    [StdInvariant.FuzzArtifactSelectorStructOutput[]],
    "view"
  >;

  targetArtifacts: TypedContractMethod<[], [string[]], "view">;

  targetContracts: TypedContractMethod<[], [string[]], "view">;

  targetInterfaces: TypedContractMethod<
    [],
    [StdInvariant.FuzzInterfaceStructOutput[]],
    "view"
  >;

  targetSelectors: TypedContractMethod<
    [],
    [StdInvariant.FuzzSelectorStructOutput[]],
    "view"
  >;

  targetSenders: TypedContractMethod<[], [string[]], "view">;

  testAcquireTokens_ACQUIRE_PERMIT: TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      value: BigNumberish,
      deadline: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  testAcquireTokens_ACQUIRE_PERMIT2PERMIT: TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      amount: BigNumberish,
      expiration: BigNumberish,
      nonce: BigNumberish,
      sigDeadline: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  testAcquireTokens_ACQUIRE_PERMIT2TRANSFER: TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      amount: BigNumberish,
      nonce: BigNumberish,
      sigDeadline: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  testAcquireTokens_ACQUIRE_PREAPPROVED: TypedContractMethod<
    [tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  testAcquireTokens_InvalidAcquireMode: TypedContractMethod<
    [tokenAmount: BigNumberish, acquireMode: BigNumberish],
    [void],
    "nonpayable"
  >;

  testBaseRelayingConfig: TypedContractMethod<[], [void], "view">;

  testCompleteTransfer_InsufficientGasDropoff: TypedContractMethod<
    [
      amount: BigNumberish,
      gasDropoff: BigNumberish,
      unwrapIntent: boolean,
      recipient: AddressLike,
      originTokenBridge: BytesLike,
      targetTBR: BytesLike,
      tokenChain: BigNumberish,
      recipientChain: BigNumberish,
      tokenAddress: BytesLike,
      sequence: BigNumberish,
      unallocatedBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  testCompleteTransfer_UnrecognizedPeer: TypedContractMethod<
    [
      peerChain: BigNumberish,
      amount: BigNumberish,
      gasDropoff: BigNumberish,
      unwrapIntent: boolean,
      recipient: AddressLike,
      originTokenBridge: BytesLike,
      targetTBR: BytesLike,
      tokenChain: BigNumberish,
      recipientChain: BigNumberish,
      tokenAddress: BytesLike,
      sequence: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  testCompleteTransfer_gasToken: TypedContractMethod<
    [
      amount: BigNumberish,
      gasDropoff: BigNumberish,
      sequence: BigNumberish,
      unallocatedBalance: BigNumberish,
      transferReturn: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  testCompleteTransfer_nonGasToken: TypedContractMethod<
    [
      amount: BigNumberish,
      gasDropoff: BigNumberish,
      sequence: BigNumberish,
      unallocatedBalance: BigNumberish,
      transferReturn: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  testGetAndCheckTransferParams: TypedContractMethod<
    [recipient: BytesLike, tokenAmount: BigNumberish, gasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;

  testGetAndCheckTransferParams_GasDropoffExceedsMaximum: TypedContractMethod<
    [recipient: BytesLike, tokenAmount: BigNumberish, gasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;

  testGetAndCheckTransferParams_InvalidTokenAmount: TypedContractMethod<
    [recipient: BytesLike, gasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;

  testGetAndCheckTransferParams_InvalidTokenRecipient: TypedContractMethod<
    [tokenAmount: BigNumberish, gasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;

  testGetAndCheckTransferParams_TargetChainNotSupported: TypedContractMethod<
    [recipient: BytesLike, tokenAmount: BigNumberish, gasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;

  testGetAndCheckTransferParams_TransfersToChainArePaused: TypedContractMethod<
    [recipient: BytesLike, tokenAmount: BigNumberish, gasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;

  testParseSharedParams: TypedContractMethod<
    [
      targetChain: BigNumberish,
      recipient: BytesLike,
      gasDropoff: BigNumberish,
      inputAmount: BigNumberish
    ],
    [void],
    "view"
  >;

  testRelayFee: TypedContractMethod<
    [gasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;

  testRelayFee_GasDropoffExceedsMaximum: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  testRelayFee_RemainderBelowMwei: TypedContractMethod<
    [gasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;

  testTransferGasTokenWithRelaySimple: TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      recipient: BytesLike,
      feeQuote: BigNumberish,
      unallocatedBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  testTransferGasTokenWithRelay_FeesInsufficient: TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      recipient: BytesLike,
      feeQuote: BigNumberish,
      unallocatedBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  testTransferGasTokenWithRelay_InsufficientAllowance: TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      recipient: BytesLike,
      feeQuote: BigNumberish,
      unallocatedBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  testTransferTokenWithRelayDoubleTransfer: TypedContractMethod<
    [
      firstTokenAmount: BigNumberish,
      secondTokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      recipient: BytesLike,
      feeQuote: BigNumberish,
      unallocatedBalance: BigNumberish,
      wormholeFee: BigNumberish,
      decimals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  testTransferTokenWithRelaySimple: TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      recipient: BytesLike,
      feeQuote: BigNumberish,
      unallocatedBalance: BigNumberish,
      wormholeFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  testTransferTokenWithRelay_FeesInsufficient: TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      recipient: BytesLike,
      feeQuote: BigNumberish,
      wormholeFee: BigNumberish,
      unallocatedBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  testTransferTokenWithRelay_InsufficientAllowance: TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      recipient: BytesLike,
      feeQuote: BigNumberish,
      unallocatedBalance: BigNumberish,
      wormholeFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "IS_TEST"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "excludeArtifacts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "excludeContracts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "excludeSelectors"
  ): TypedContractMethod<[], [StdInvariant.FuzzSelectorStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "excludeSenders"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "failed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "setUp"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "targetArtifactSelectors"
  ): TypedContractMethod<
    [],
    [StdInvariant.FuzzArtifactSelectorStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "targetArtifacts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "targetContracts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "targetInterfaces"
  ): TypedContractMethod<
    [],
    [StdInvariant.FuzzInterfaceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "targetSelectors"
  ): TypedContractMethod<[], [StdInvariant.FuzzSelectorStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "targetSenders"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "testAcquireTokens_ACQUIRE_PERMIT"
  ): TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      value: BigNumberish,
      deadline: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testAcquireTokens_ACQUIRE_PERMIT2PERMIT"
  ): TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      amount: BigNumberish,
      expiration: BigNumberish,
      nonce: BigNumberish,
      sigDeadline: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testAcquireTokens_ACQUIRE_PERMIT2TRANSFER"
  ): TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      amount: BigNumberish,
      nonce: BigNumberish,
      sigDeadline: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testAcquireTokens_ACQUIRE_PREAPPROVED"
  ): TypedContractMethod<[tokenAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testAcquireTokens_InvalidAcquireMode"
  ): TypedContractMethod<
    [tokenAmount: BigNumberish, acquireMode: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testBaseRelayingConfig"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "testCompleteTransfer_InsufficientGasDropoff"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      gasDropoff: BigNumberish,
      unwrapIntent: boolean,
      recipient: AddressLike,
      originTokenBridge: BytesLike,
      targetTBR: BytesLike,
      tokenChain: BigNumberish,
      recipientChain: BigNumberish,
      tokenAddress: BytesLike,
      sequence: BigNumberish,
      unallocatedBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testCompleteTransfer_UnrecognizedPeer"
  ): TypedContractMethod<
    [
      peerChain: BigNumberish,
      amount: BigNumberish,
      gasDropoff: BigNumberish,
      unwrapIntent: boolean,
      recipient: AddressLike,
      originTokenBridge: BytesLike,
      targetTBR: BytesLike,
      tokenChain: BigNumberish,
      recipientChain: BigNumberish,
      tokenAddress: BytesLike,
      sequence: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testCompleteTransfer_gasToken"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      gasDropoff: BigNumberish,
      sequence: BigNumberish,
      unallocatedBalance: BigNumberish,
      transferReturn: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testCompleteTransfer_nonGasToken"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      gasDropoff: BigNumberish,
      sequence: BigNumberish,
      unallocatedBalance: BigNumberish,
      transferReturn: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testGetAndCheckTransferParams"
  ): TypedContractMethod<
    [recipient: BytesLike, tokenAmount: BigNumberish, gasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testGetAndCheckTransferParams_GasDropoffExceedsMaximum"
  ): TypedContractMethod<
    [recipient: BytesLike, tokenAmount: BigNumberish, gasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testGetAndCheckTransferParams_InvalidTokenAmount"
  ): TypedContractMethod<
    [recipient: BytesLike, gasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testGetAndCheckTransferParams_InvalidTokenRecipient"
  ): TypedContractMethod<
    [tokenAmount: BigNumberish, gasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testGetAndCheckTransferParams_TargetChainNotSupported"
  ): TypedContractMethod<
    [recipient: BytesLike, tokenAmount: BigNumberish, gasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testGetAndCheckTransferParams_TransfersToChainArePaused"
  ): TypedContractMethod<
    [recipient: BytesLike, tokenAmount: BigNumberish, gasDropoff: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testParseSharedParams"
  ): TypedContractMethod<
    [
      targetChain: BigNumberish,
      recipient: BytesLike,
      gasDropoff: BigNumberish,
      inputAmount: BigNumberish
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "testRelayFee"
  ): TypedContractMethod<[gasDropoff: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRelayFee_GasDropoffExceedsMaximum"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testRelayFee_RemainderBelowMwei"
  ): TypedContractMethod<[gasDropoff: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testTransferGasTokenWithRelaySimple"
  ): TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      recipient: BytesLike,
      feeQuote: BigNumberish,
      unallocatedBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testTransferGasTokenWithRelay_FeesInsufficient"
  ): TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      recipient: BytesLike,
      feeQuote: BigNumberish,
      unallocatedBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testTransferGasTokenWithRelay_InsufficientAllowance"
  ): TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      recipient: BytesLike,
      feeQuote: BigNumberish,
      unallocatedBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testTransferTokenWithRelayDoubleTransfer"
  ): TypedContractMethod<
    [
      firstTokenAmount: BigNumberish,
      secondTokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      recipient: BytesLike,
      feeQuote: BigNumberish,
      unallocatedBalance: BigNumberish,
      wormholeFee: BigNumberish,
      decimals: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testTransferTokenWithRelaySimple"
  ): TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      recipient: BytesLike,
      feeQuote: BigNumberish,
      unallocatedBalance: BigNumberish,
      wormholeFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testTransferTokenWithRelay_FeesInsufficient"
  ): TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      recipient: BytesLike,
      feeQuote: BigNumberish,
      wormholeFee: BigNumberish,
      unallocatedBalance: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testTransferTokenWithRelay_InsufficientAllowance"
  ): TypedContractMethod<
    [
      tokenAmount: BigNumberish,
      gasDropoff: BigNumberish,
      recipient: BytesLike,
      feeQuote: BigNumberish,
      unallocatedBalance: BigNumberish,
      wormholeFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "SlotFound"
  ): TypedContractEvent<
    SlotFoundEvent.InputTuple,
    SlotFoundEvent.OutputTuple,
    SlotFoundEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferRedeemed"
  ): TypedContractEvent<
    TransferRedeemedEvent.InputTuple,
    TransferRedeemedEvent.OutputTuple,
    TransferRedeemedEvent.OutputObject
  >;
  getEvent(
    key: "TransferRequested"
  ): TypedContractEvent<
    TransferRequestedEvent.InputTuple,
    TransferRequestedEvent.OutputTuple,
    TransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "WARNING_UninitedSlot"
  ): TypedContractEvent<
    WARNING_UninitedSlotEvent.InputTuple,
    WARNING_UninitedSlotEvent.OutputTuple,
    WARNING_UninitedSlotEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "log"
  ): TypedContractEvent<
    logEvent.InputTuple,
    logEvent.OutputTuple,
    logEvent.OutputObject
  >;
  getEvent(
    key: "log_address"
  ): TypedContractEvent<
    log_addressEvent.InputTuple,
    log_addressEvent.OutputTuple,
    log_addressEvent.OutputObject
  >;
  getEvent(
    key: "log_array(uint256[])"
  ): TypedContractEvent<
    log_array_uint256_array_Event.InputTuple,
    log_array_uint256_array_Event.OutputTuple,
    log_array_uint256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_array(int256[])"
  ): TypedContractEvent<
    log_array_int256_array_Event.InputTuple,
    log_array_int256_array_Event.OutputTuple,
    log_array_int256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_array(address[])"
  ): TypedContractEvent<
    log_array_address_array_Event.InputTuple,
    log_array_address_array_Event.OutputTuple,
    log_array_address_array_Event.OutputObject
  >;
  getEvent(
    key: "log_bytes"
  ): TypedContractEvent<
    log_bytesEvent.InputTuple,
    log_bytesEvent.OutputTuple,
    log_bytesEvent.OutputObject
  >;
  getEvent(
    key: "log_bytes32"
  ): TypedContractEvent<
    log_bytes32Event.InputTuple,
    log_bytes32Event.OutputTuple,
    log_bytes32Event.OutputObject
  >;
  getEvent(
    key: "log_int"
  ): TypedContractEvent<
    log_intEvent.InputTuple,
    log_intEvent.OutputTuple,
    log_intEvent.OutputObject
  >;
  getEvent(
    key: "log_named_address"
  ): TypedContractEvent<
    log_named_addressEvent.InputTuple,
    log_named_addressEvent.OutputTuple,
    log_named_addressEvent.OutputObject
  >;
  getEvent(
    key: "log_named_array(string,uint256[])"
  ): TypedContractEvent<
    log_named_array_string_uint256_array_Event.InputTuple,
    log_named_array_string_uint256_array_Event.OutputTuple,
    log_named_array_string_uint256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_named_array(string,int256[])"
  ): TypedContractEvent<
    log_named_array_string_int256_array_Event.InputTuple,
    log_named_array_string_int256_array_Event.OutputTuple,
    log_named_array_string_int256_array_Event.OutputObject
  >;
  getEvent(
    key: "log_named_array(string,address[])"
  ): TypedContractEvent<
    log_named_array_string_address_array_Event.InputTuple,
    log_named_array_string_address_array_Event.OutputTuple,
    log_named_array_string_address_array_Event.OutputObject
  >;
  getEvent(
    key: "log_named_bytes"
  ): TypedContractEvent<
    log_named_bytesEvent.InputTuple,
    log_named_bytesEvent.OutputTuple,
    log_named_bytesEvent.OutputObject
  >;
  getEvent(
    key: "log_named_bytes32"
  ): TypedContractEvent<
    log_named_bytes32Event.InputTuple,
    log_named_bytes32Event.OutputTuple,
    log_named_bytes32Event.OutputObject
  >;
  getEvent(
    key: "log_named_decimal_int"
  ): TypedContractEvent<
    log_named_decimal_intEvent.InputTuple,
    log_named_decimal_intEvent.OutputTuple,
    log_named_decimal_intEvent.OutputObject
  >;
  getEvent(
    key: "log_named_decimal_uint"
  ): TypedContractEvent<
    log_named_decimal_uintEvent.InputTuple,
    log_named_decimal_uintEvent.OutputTuple,
    log_named_decimal_uintEvent.OutputObject
  >;
  getEvent(
    key: "log_named_int"
  ): TypedContractEvent<
    log_named_intEvent.InputTuple,
    log_named_intEvent.OutputTuple,
    log_named_intEvent.OutputObject
  >;
  getEvent(
    key: "log_named_string"
  ): TypedContractEvent<
    log_named_stringEvent.InputTuple,
    log_named_stringEvent.OutputTuple,
    log_named_stringEvent.OutputObject
  >;
  getEvent(
    key: "log_named_uint"
  ): TypedContractEvent<
    log_named_uintEvent.InputTuple,
    log_named_uintEvent.OutputTuple,
    log_named_uintEvent.OutputObject
  >;
  getEvent(
    key: "log_string"
  ): TypedContractEvent<
    log_stringEvent.InputTuple,
    log_stringEvent.OutputTuple,
    log_stringEvent.OutputObject
  >;
  getEvent(
    key: "log_uint"
  ): TypedContractEvent<
    log_uintEvent.InputTuple,
    log_uintEvent.OutputTuple,
    log_uintEvent.OutputObject
  >;
  getEvent(
    key: "logs"
  ): TypedContractEvent<
    logsEvent.InputTuple,
    logsEvent.OutputTuple,
    logsEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "SlotFound(address,bytes4,bytes32,uint256)": TypedContractEvent<
      SlotFoundEvent.InputTuple,
      SlotFoundEvent.OutputTuple,
      SlotFoundEvent.OutputObject
    >;
    SlotFound: TypedContractEvent<
      SlotFoundEvent.InputTuple,
      SlotFoundEvent.OutputTuple,
      SlotFoundEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferRedeemed(uint16,bytes32,uint64)": TypedContractEvent<
      TransferRedeemedEvent.InputTuple,
      TransferRedeemedEvent.OutputTuple,
      TransferRedeemedEvent.OutputObject
    >;
    TransferRedeemed: TypedContractEvent<
      TransferRedeemedEvent.InputTuple,
      TransferRedeemedEvent.OutputTuple,
      TransferRedeemedEvent.OutputObject
    >;

    "TransferRequested(address,uint64,uint32,uint256)": TypedContractEvent<
      TransferRequestedEvent.InputTuple,
      TransferRequestedEvent.OutputTuple,
      TransferRequestedEvent.OutputObject
    >;
    TransferRequested: TypedContractEvent<
      TransferRequestedEvent.InputTuple,
      TransferRequestedEvent.OutputTuple,
      TransferRequestedEvent.OutputObject
    >;

    "WARNING_UninitedSlot(address,uint256)": TypedContractEvent<
      WARNING_UninitedSlotEvent.InputTuple,
      WARNING_UninitedSlotEvent.OutputTuple,
      WARNING_UninitedSlotEvent.OutputObject
    >;
    WARNING_UninitedSlot: TypedContractEvent<
      WARNING_UninitedSlotEvent.InputTuple,
      WARNING_UninitedSlotEvent.OutputTuple,
      WARNING_UninitedSlotEvent.OutputObject
    >;

    "Withdrawal(address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;

    "log(string)": TypedContractEvent<
      logEvent.InputTuple,
      logEvent.OutputTuple,
      logEvent.OutputObject
    >;
    log: TypedContractEvent<
      logEvent.InputTuple,
      logEvent.OutputTuple,
      logEvent.OutputObject
    >;

    "log_address(address)": TypedContractEvent<
      log_addressEvent.InputTuple,
      log_addressEvent.OutputTuple,
      log_addressEvent.OutputObject
    >;
    log_address: TypedContractEvent<
      log_addressEvent.InputTuple,
      log_addressEvent.OutputTuple,
      log_addressEvent.OutputObject
    >;

    "log_array(uint256[])": TypedContractEvent<
      log_array_uint256_array_Event.InputTuple,
      log_array_uint256_array_Event.OutputTuple,
      log_array_uint256_array_Event.OutputObject
    >;
    "log_array(int256[])": TypedContractEvent<
      log_array_int256_array_Event.InputTuple,
      log_array_int256_array_Event.OutputTuple,
      log_array_int256_array_Event.OutputObject
    >;
    "log_array(address[])": TypedContractEvent<
      log_array_address_array_Event.InputTuple,
      log_array_address_array_Event.OutputTuple,
      log_array_address_array_Event.OutputObject
    >;

    "log_bytes(bytes)": TypedContractEvent<
      log_bytesEvent.InputTuple,
      log_bytesEvent.OutputTuple,
      log_bytesEvent.OutputObject
    >;
    log_bytes: TypedContractEvent<
      log_bytesEvent.InputTuple,
      log_bytesEvent.OutputTuple,
      log_bytesEvent.OutputObject
    >;

    "log_bytes32(bytes32)": TypedContractEvent<
      log_bytes32Event.InputTuple,
      log_bytes32Event.OutputTuple,
      log_bytes32Event.OutputObject
    >;
    log_bytes32: TypedContractEvent<
      log_bytes32Event.InputTuple,
      log_bytes32Event.OutputTuple,
      log_bytes32Event.OutputObject
    >;

    "log_int(int256)": TypedContractEvent<
      log_intEvent.InputTuple,
      log_intEvent.OutputTuple,
      log_intEvent.OutputObject
    >;
    log_int: TypedContractEvent<
      log_intEvent.InputTuple,
      log_intEvent.OutputTuple,
      log_intEvent.OutputObject
    >;

    "log_named_address(string,address)": TypedContractEvent<
      log_named_addressEvent.InputTuple,
      log_named_addressEvent.OutputTuple,
      log_named_addressEvent.OutputObject
    >;
    log_named_address: TypedContractEvent<
      log_named_addressEvent.InputTuple,
      log_named_addressEvent.OutputTuple,
      log_named_addressEvent.OutputObject
    >;

    "log_named_array(string,uint256[])": TypedContractEvent<
      log_named_array_string_uint256_array_Event.InputTuple,
      log_named_array_string_uint256_array_Event.OutputTuple,
      log_named_array_string_uint256_array_Event.OutputObject
    >;
    "log_named_array(string,int256[])": TypedContractEvent<
      log_named_array_string_int256_array_Event.InputTuple,
      log_named_array_string_int256_array_Event.OutputTuple,
      log_named_array_string_int256_array_Event.OutputObject
    >;
    "log_named_array(string,address[])": TypedContractEvent<
      log_named_array_string_address_array_Event.InputTuple,
      log_named_array_string_address_array_Event.OutputTuple,
      log_named_array_string_address_array_Event.OutputObject
    >;

    "log_named_bytes(string,bytes)": TypedContractEvent<
      log_named_bytesEvent.InputTuple,
      log_named_bytesEvent.OutputTuple,
      log_named_bytesEvent.OutputObject
    >;
    log_named_bytes: TypedContractEvent<
      log_named_bytesEvent.InputTuple,
      log_named_bytesEvent.OutputTuple,
      log_named_bytesEvent.OutputObject
    >;

    "log_named_bytes32(string,bytes32)": TypedContractEvent<
      log_named_bytes32Event.InputTuple,
      log_named_bytes32Event.OutputTuple,
      log_named_bytes32Event.OutputObject
    >;
    log_named_bytes32: TypedContractEvent<
      log_named_bytes32Event.InputTuple,
      log_named_bytes32Event.OutputTuple,
      log_named_bytes32Event.OutputObject
    >;

    "log_named_decimal_int(string,int256,uint256)": TypedContractEvent<
      log_named_decimal_intEvent.InputTuple,
      log_named_decimal_intEvent.OutputTuple,
      log_named_decimal_intEvent.OutputObject
    >;
    log_named_decimal_int: TypedContractEvent<
      log_named_decimal_intEvent.InputTuple,
      log_named_decimal_intEvent.OutputTuple,
      log_named_decimal_intEvent.OutputObject
    >;

    "log_named_decimal_uint(string,uint256,uint256)": TypedContractEvent<
      log_named_decimal_uintEvent.InputTuple,
      log_named_decimal_uintEvent.OutputTuple,
      log_named_decimal_uintEvent.OutputObject
    >;
    log_named_decimal_uint: TypedContractEvent<
      log_named_decimal_uintEvent.InputTuple,
      log_named_decimal_uintEvent.OutputTuple,
      log_named_decimal_uintEvent.OutputObject
    >;

    "log_named_int(string,int256)": TypedContractEvent<
      log_named_intEvent.InputTuple,
      log_named_intEvent.OutputTuple,
      log_named_intEvent.OutputObject
    >;
    log_named_int: TypedContractEvent<
      log_named_intEvent.InputTuple,
      log_named_intEvent.OutputTuple,
      log_named_intEvent.OutputObject
    >;

    "log_named_string(string,string)": TypedContractEvent<
      log_named_stringEvent.InputTuple,
      log_named_stringEvent.OutputTuple,
      log_named_stringEvent.OutputObject
    >;
    log_named_string: TypedContractEvent<
      log_named_stringEvent.InputTuple,
      log_named_stringEvent.OutputTuple,
      log_named_stringEvent.OutputObject
    >;

    "log_named_uint(string,uint256)": TypedContractEvent<
      log_named_uintEvent.InputTuple,
      log_named_uintEvent.OutputTuple,
      log_named_uintEvent.OutputObject
    >;
    log_named_uint: TypedContractEvent<
      log_named_uintEvent.InputTuple,
      log_named_uintEvent.OutputTuple,
      log_named_uintEvent.OutputObject
    >;

    "log_string(string)": TypedContractEvent<
      log_stringEvent.InputTuple,
      log_stringEvent.OutputTuple,
      log_stringEvent.OutputObject
    >;
    log_string: TypedContractEvent<
      log_stringEvent.InputTuple,
      log_stringEvent.OutputTuple,
      log_stringEvent.OutputObject
    >;

    "log_uint(uint256)": TypedContractEvent<
      log_uintEvent.InputTuple,
      log_uintEvent.OutputTuple,
      log_uintEvent.OutputObject
    >;
    log_uint: TypedContractEvent<
      log_uintEvent.InputTuple,
      log_uintEvent.OutputTuple,
      log_uintEvent.OutputObject
    >;

    "logs(bytes)": TypedContractEvent<
      logsEvent.InputTuple,
      logsEvent.OutputTuple,
      logsEvent.OutputObject
    >;
    logs: TypedContractEvent<
      logsEvent.InputTuple,
      logsEvent.OutputTuple,
      logsEvent.OutputObject
    >;
  };
}
